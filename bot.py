from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types.input_file import FSInputFile
from aiogram.types import LabeledPrice, PreCheckoutQuery
import asyncio
import random
import os
import glob
import json
from datetime import datetime,timedelta
def is_subscription_active(user_id):
    date_str = paid_users.get(str(user_id))
    if not date_str:
        return False
    paid_date = datetime.fromisoformat(date_str)
    return datetime.now() < paid_date + timedelta(days=30)

PAID_USERS_FILE = "paid_users.json"
def load_paid_users():
    if os.path.exists(PAID_USERS_FILE):
        with open(PAID_USERS_FILE, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except:
                return {}
    return {}

def save_paid_users():
    with open(PAID_USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(paid_users, f)

paid_users = load_paid_users()

TOKEN = '7892675445:AAF831rV9Wbs-GMyLeCwegyv3MxiaUoCuaY'
PROVIDER_TOKEN = '1725141586:TEST:b7bb9606f080d36b4d4db5c5714a0168d7fcacfb'  # –¢–≤—ñ–π —Ç–æ–∫–µ–Ω
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
paid_users = {}

# –î–∞–ª—ñ ‚Äî —Ç–≤—ñ–π –∫–æ–¥ –∑ –æ–±—Ä–æ–±–Ω–∏–∫–∞–º–∏
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìö–î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è"), KeyboardButton(text="üìù–ö–æ–Ω—Å–ø–µ–∫—Ç–∏")],
        [KeyboardButton(text="üìÜ –†–æ–∑–∫–ª–∞–¥ —É—Ä–æ–∫—ñ–≤"), KeyboardButton(text="ü™ô –ü—ñ–¥–∫–∏–Ω—É—Ç–∏ –º–æ–Ω–µ—Ç–∫—É")],
        [KeyboardButton(text="üóì –ö–æ–ª–∏ –≤–∂–µ –≤–∏—Ö—ñ–¥–Ω—ñ"), KeyboardButton(text="–û–Ω–æ–≤–∏—Ç–∏ –¥.–∑")],
        [KeyboardButton(text="–ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫"), KeyboardButton(text="üí≥ –ö—É–ø–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É")]
    ],
    resize_keyboard=True
)

@dp.message(F.text == "üìö–î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è")
async def handle_dz(message: Message):
    if message.from_user.id not in paid_users:
        await message.answer("üîí –©–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è, –∫—É–ø–∏ –ø—ñ–¥–ø–∏—Å–∫—É ‚Äî 50 –∑—ñ—Ä–æ–∫. –ù–∞—Ç–∏—Å–Ω–∏ üí≥ –ö—É–ø–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É.")
        return

    if os.path.exists("C:/Users/–ú–∏–∫–æ–ª–∞ –ö–º–∏—Ü—è–∫/PythonProject1/.venv/dz.txt"):
        with open("C:/Users/–ú–∏–∫–æ–ª–∞ –ö–º–∏—Ü—è–∫/PythonProject1/.venv/dz.txt", "r", encoding="utf-8") as f:
            dz_text = f.read()
        await message.answer(f"<b>–î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è:</b>\n\n{dz_text}")


# –ü—ñ–¥–º–µ–Ω—é –ø—Ä–µ–¥–º–µ—Ç—ñ–≤

subjects_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–£–∫—Ä –º–æ–≤–∞"), KeyboardButton(text="–ê–ª–≥–µ–±—Ä–∞")],
        [KeyboardButton(text="–ì–µ–æ–º–µ—Ç—Ä—ñ—è"), KeyboardButton(text="–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ª—ñ—Ç")],
        [KeyboardButton(text="–Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä"), KeyboardButton(text="–§—ñ–∑–∏–∫–∞")],
        [KeyboardButton(text="–ó–∞—Ä—É–±—ñ–∂–Ω–∞"), KeyboardButton(text="–ì–µ–æ–≥—Ä–∞—Ñ—ñ—è")],
        [KeyboardButton(text=" üîô–ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

class NoteStates(StatesGroup):
    choosing_subject = State()

# –ö–Ω–æ–ø–∫–∞ " üìù–ö–æ–Ω—Å–ø–µ–∫—Ç–∏"


@dp.message(F.text == "üìù–ö–æ–Ω—Å–ø–µ–∫—Ç–∏")
async def handle_notes(message: Message, state: FSMContext):
    if message.from_user.id not in paid_users:
        await message.answer("üîí –©–æ–± –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–∏, –∫—É–ø–∏ –ø—ñ–¥–ø–∏—Å–∫—É ‚Äî 50 –∑—ñ—Ä–æ–∫. –ù–∞—Ç–∏—Å–Ω–∏ üí≥ –ö—É–ø–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É.")
        return

    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç:",reply_markup=subjects_keyboard)
    await state.set_state(NoteStates.choosing_subject)



@dp.message(NoteStates.choosing_subject)
async def show_notes_for_subject(message: Message, state: FSMContext):
    subject = message.text.strip()

    if subject == "üîô–ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é":
        await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é üëá", reply_markup=main_menu)
        await state.clear()
        return

    # –§–æ—Ä–º—É—î–º–æ —à–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ –∑ —Ñ–æ—Ç–æ
    subject_folder = subject.replace(" ", "_")
    folder_path = f"notes/{subject_folder}"

    if not os.path.exists(folder_path):
        await message.answer(f"‚ùå –î–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ <b>{subject}</b> —â–µ –Ω–µ–º–∞—î –∫–æ–Ω—Å–ø–µ–∫—Ç—ñ–≤.")
        return

    files = os.listdir(folder_path)
    image_files = [f for f in files if f.endswith(".jpg") or f.endswith(".png")]

    if not image_files:
        await message.answer(f"‚ùå –î–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ <b>{subject}</b> —â–µ –Ω–µ–º–∞—î —Ñ–æ—Ç–æ –∫–æ–Ω—Å–ø–µ–∫—Ç—ñ–≤.")
        return

    for image_file in image_files:
        photo_path = os.path.join(folder_path, image_file)
        photo_inputfile = FSInputFile(photo_path)  # –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–ª–∞—Å
        await bot.send_photo(chat_id=message.chat.id, photo=photo_inputfile)

    await message.answer("üìö –û—Å—å —É—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–Ω—Å–ø–µ–∫—Ç–∏!", reply_markup=subjects_keyboard)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ üëá", reply_markup=main_menu)

# –û–±—Ä–æ–±–∫–∞ –∫–æ–∂–Ω–æ—ó –∫–Ω–æ–ø–∫–∏

@dp.message(F.text == "üìÜ –†–æ–∑–∫–ª–∞–¥ —É—Ä–æ–∫—ñ–≤")
async def handle_schedule(message: Message):
    await message.answer("1.–£—Ä–æ–∫ 8:00‚Äì8:45 –ø–µ—Ä–µ—Ä–≤–∞ 15—Ö–≤            2.–£—Ä–æ–∫ 9:00‚Äì9:45 –ø–µ—Ä–µ—Ä–≤–∞ 15—Ö–≤                  3.–£—Ä–æ–∫ 10:00‚Äì10:45 –ø–µ—Ä–µ—Ä–≤–∞ 15—Ö–≤               4.–£—Ä–æ–∫ 11:00‚Äì11:45 –ø–µ—Ä–µ—Ä–≤–∞ 15—Ö–≤              5.–£—Ä–æ–∫ 12:00‚Äì12:45 –ø–µ—Ä–µ—Ä–≤–∞ 15—Ö–≤               6.–£—Ä–æ–∫ 13:00‚Äì13:45 –ø–µ—Ä–µ—Ä–≤–∞ 15—Ö–≤              7.–£—Ä–æ–∫ 13:50‚Äì14:35 –ø–µ—Ä–µ—Ä–≤–∞ 5—Ö–≤                  8.–£—Ä–æ–∫ 14:40‚Äì15:25 –ø–µ—Ä–µ—Ä–≤–∞ 5—Ö–≤")

@dp.message(F.text == "ü™ô –ü—ñ–¥–∫–∏–Ω—É—Ç–∏ –º–æ–Ω–µ—Ç–∫—É")
async def handle_coin(message: Message):
    result = random.choice(["–û—Ä—ë–ª ü¶Ö", "–†–µ—à–∫–∞ üí∞"])
    await message.answer(f"–í–∏–ø–∞–ª–æ: {result}")

@dp.message(F.text == "üóì –ö–æ–ª–∏ –≤–∂–µ –≤–∏—Ö—ñ–¥–Ω—ñ")
async def handle_weekend(message: Message):
    now = datetime.now()

    # –í–∏—Ö—ñ–¥–Ω—ñ (—Å—É–±–æ—Ç–∞)
    weekday = now.weekday()  # 0 ‚Äî –ø–æ–Ω–µ–¥—ñ–ª–æ–∫, 5 ‚Äî —Å—É–±–æ—Ç–∞
    if weekday < 5:
        weekend = now.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=(5 - weekday))
        time_to_weekend = weekend - now
        days = time_to_weekend.days
        hours, remainder = divmod(time_to_weekend.seconds, 3600)
        minutes = remainder // 60
        text_weekend = f"–î–æ –≤–∏—Ö—ñ–¥–Ω–∏—Ö –∑–∞–ª–∏—à–∏–ª–æ—Å—å {days} –¥–Ω—ñ–≤, {hours} –≥–æ–¥–∏–Ω —ñ {minutes} —Ö–≤–∏–ª–∏–Ω!"
    else:
        text_weekend = "üéâ –í–∂–µ –≤–∏—Ö—ñ–¥–Ω—ñ! –ù–∞—Å–æ–ª–æ–¥–∂—É–π—Å—è!"

    # –õ—ñ—Ç–Ω—ñ –∫–∞–Ω—ñ–∫—É–ª–∏ ‚Äî 6 —á–µ—Ä–≤–Ω—è (–º–æ–∂–µ—à –∑–º—ñ–Ω–∏—Ç–∏ —á–∞—Å)
    summer_date = datetime(now.year, 6, 6, 0, 0, 0)
    if now >= summer_date:
        text_summer = "‚òÄÔ∏è –õ—ñ—Ç–Ω—ñ –∫–∞–Ω—ñ–∫—É–ª–∏ –≤–∂–µ —Ä–æ–∑–ø–æ—á–∞–ª–∏—Å—å! –£—Ä–∞!"
    else:
        time_to_summer = summer_date - now
        days = time_to_summer.days
        hours, remainder = divmod(time_to_summer.seconds, 3600)
        minutes = remainder // 60
        text_summer = f"–î–æ –ª—ñ—Ç–Ω—ñ—Ö –∫–∞–Ω—ñ–∫—É–ª –∑–∞–ª–∏—à–∏–ª–æ—Å—å {days} –¥–Ω—ñ–≤, {hours} –≥–æ–¥–∏–Ω —ñ {minutes} —Ö–≤–∏–ª–∏–Ω!"

    # –í—ñ–¥–ø–æ–≤—ñ–¥—å
    await message.answer(f"{text_weekend}\n\n{text_summer}")

@dp.message(F.text == "–û–Ω–æ–≤–∏—Ç–∏ –¥.–∑")
async def handle_update_dz(message: Message, state: FSMContext):
    chat_id = message.chat.id

    # 1. –°–ø—Ä–æ–±–∞ –æ—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –±–æ—Ç –º–∞—î –ø—Ä–∞–≤–∞)
    try:
        # –í–∏–¥–∞–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 20 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–º–æ–∂–µ—à –∑–º—ñ–Ω–∏—Ç–∏)
        for i in range(message.message_id, message.message_id - 20, -1):
            try:
                await bot.delete_message(chat_id, i)
            except:
                continue  # –î–µ—è–∫—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ —á–∞—Ç –ø–æ–≤–Ω—ñ—Å—Ç—é.")

    # 2. –û—á–∏—Å—Ç–∏—Ç–∏ FSM —Å—Ç–∞–Ω
    await state.clear()

    # 3. –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è "–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É"
    await bot.send_message(chat_id, "üîÑ –ë–æ—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu)

@dp.message(F.text == "–ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫")
async def handle_events(message: Message):
    await message.answer("—É —Ü—å–æ–º—É –∫–∞–Ω–∞–ª—ñ –º–æ–∂–µ—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫:https://t.me/+OwL1YBWfqatlYWQ6")
from aiogram.types import LabeledPrice, PreCheckoutQuery, ShippingOption, ShippingQuery, InlineKeyboardMarkup, InlineKeyboardButton

PROVIDER_TOKEN = '1725141586:TEST:b7bb9606f080d36b4d4db5c5714a0168d7fcacfb'  # –¢–≤—ñ–π —Ç–µ—Å—Ç–æ–≤–∏–π —Ç–æ–∫–µ–Ω

@dp.message(F.text == "üí≥ –ö—É–ø–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É")
async def pay_sub(message: Message):
    prices = [LabeledPrice(label="–ú—ñ—Å—è—á–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞", amount=5000)]  # 50 –∑—ñ—Ä–æ–∫ = 50.00 * 100

    await bot.send_invoice(
        chat_id=message.chat.id,
        title="–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
        description="–î–æ—Å—Ç—É–ø –¥–æ –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ –∫–æ–Ω—Å–ø–µ–∫—Ç—ñ–≤ –Ω–∞ 1 –º—ñ—Å—è—Ü—å",
        payload="monthly_sub",
        provider_token=PROVIDER_TOKEN,
        currency="UAH",
        prices=prices,
        start_parameter="subscription"
    )

@dp.pre_checkout_query()
async def checkout(pre_checkout_q: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

@dp.message(F.successful_payment)
async def got_payment(message: Message):
    user_id = message.from_user.id
    paid_users.add(user_id)
    await message.answer("‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –î–æ—Å—Ç—É–ø –¥–æ –∫–æ–Ω—Å–ø–µ–∫—Ç—ñ–≤ —ñ –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏—Ç–æ.")
# –ó–∞–ø—É—Å–∫
@dp.message(Command("status"))
async def status(message: Message):
    user_id = message.from_user.id
    if is_subscription_active(user_id):
        date_str = paid_users.get(str(user_id))
        paid_date = datetime.fromisoformat(date_str)
        expires = paid_date + timedelta(days=30)
        await message.answer(f"‚úÖ –í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ <b>{expires.strftime('%d.%m.%Y %H:%M')}</b>")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
